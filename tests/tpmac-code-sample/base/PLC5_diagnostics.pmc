CLOSE

;####################################################
; Calculation of CPU load for a Turbo PMAC
;
; Ronaldo Mercado 2009-04-14
; Mostly copied from "Turbo SRM.pdf" [1] ; define clock resolution in milliseconds
#define clock_tick              50
; Adjusted P variables to be in the P5xx range as per 
; "PMAC Rules and Guidelines" [2]
; Modified original formula for end result P575, 
; to reflect a first order filter with alpha=1/16 (1/P576)
;
; [1] http://www.deltatau.com/fmenu/TURBO%20SRM.PDF page 17 (35 of 795)
; [2] http://www.cs.diamond.ac.uk/cgi-bin/wiki.cgi/PMAC_PLC_Rules_and_Guidelines 
;
; Macros:
; - PLC: plc number
;
; Result stored in
;  P575
; Uses variables 
;  P567..576
; and P500, P516..540
; Added test functionality
; Nader.Afshar@synchrotron.org.au
; Moving average calculation for ADC_A and ADC_B (m105, m106)
;
;
;####################################################
#define plcbase         500
; number of axes
#define naxis           P999

; timer
#define timer   i5312
#define millisec_conversion   8388608/i10
; define clock resolution in milliseconds
#define clock_tick              50


#define axis_number              P(plcbase)
#define ADC_A     M(axis_number*100+5) ;
#define ADC_B     M(axis_number*100+6) ;

#define Quad_c    M(axis_number*100+75) ;
#define Direct_c    M(axis_number*100+76) ;

#define ADC_avg_Factor     P(plcbase+10) ;
#define ADC_A_MaxAbs     P(plcbase+axis_number+10) ;
#define ADC_B_MaxAbs     P(plcbase+axis_number+20) ;
#define Vel_avg_Factor     P(plcbase+30) ;
#define Vel_avg     P(plcbase+axis_number+30) ;
#define Vel_var     P(plcbase+axis_number +40) ;

#define Quad_c_Avg    P(plcbase+axis_number +80) ;
#define Direct_c_Avg    P(plcbase+axis_number +90) ;

#define ActVel      M(axis_number*100+66)*5/(i(axis_number*100+60)+1);servo cycle ;I(axis_number*100+09)*32/1000*2.5
#define AvgActVel   M(axis_number*100+74)*5

#define Vel_avg_dum    P508
#define Vel_var_dum     P507
#define ActVel_dum      P506
#define AvgActVel_dum   P505

P510..560=0;
p530=50
p510=25

P570=4 ; 4 phase interrupts per servo interrupt
P576=16 ; Length of filter for averaging duty cycle

OPEN PLC 5 
CLEAR

P571=M71/M70 ; Phase task duty cycle
P569=INT(M72/M70) ; # of times phase interrupted servo
P572=(M72-P569*M71)/(M70*P570) ; Servo task duty cycle
P568=INT(M73/M70) ; # of times phase interrupted RTI
P567=INT(M73/(M70*P570)) ; # of times servo interrupted RTI
P573=(M73-P568*M71-P567*(M72-P569*M71))/(M70*P570*(I8+1))
; RTI task duty cycle
P574=P571+P572+P573 ; Latest total foreground duty cycle
P575=(P574+(P576-1)*P575)/P576 ; Averaged total foreground duty cycle
axis_number = 1

if (timer < 0)
   ; Run this code once every clock tick
    timer = clock_tick * millisec_conversion    

    while(axis_number !> naxis)

        Quad_c_Avg=(Quad_c_Avg*ADC_avg_Factor+abs(Quad_c))/(ADC_avg_Factor+1)
        Direct_c_Avg=(Direct_c_Avg*ADC_avg_Factor+abs(Direct_c))/(ADC_avg_Factor+1) 

        axis_number=axis_number+1
    endwhile
endif

CLOSE

ENABLE PLC 5
