;;;; SLSA MC Development & Configuration tool for TurboPMAC by Nader.Afshar@synchrotron.org.au
;;;; ===========================================
;;;; Auto generated ExtendedPMAC script from X-model at 17-Jul-19 11:57 by afsharn
;>e_BeamlineOrAccel_P = 0;#{Beamline (0) or Accelerator (1)}
;>e_SectorN_P = 0;#{SR sector number}
;>e_SubsystemN_P = 0;#{Subsystem ID=0 / BM1=1 / BM2=2 / IR=3 }
;>e_BranchlineN_P = 0;#{Branch line specifier}
;>e_SBSID_P = 'SR00ID01';{SBS Prefix }
;;e_MotionRackIP_P = '10.???.???.???';#{MOXA IP is used as the unique Motion Rack specifier}
;;e_MotionPsuN_P = '1?';#{Motion Rack PSU number}
;>e_BrickN_P = 0;#{Brick number 0..255 is a unique number per sector-branch}
;>e_PORT_P = 'MCS00';{Controller port}
;>e_DevName_P = 'USR00';{Device Name}
;;e_BrickIP_P = '10.???.???.???';{Brick IP address}
;>e_AxisID_P = 'MOT2';{Axis ID}
;>b_AxisN_P = 2;#{Axis number}
;>b_AmpN_P = 2;#{Amp output port}
;>b_AxisCompanionN_P = 10;#{Companion virtual axis No.}
;>b_StageEncPortN_P = 2;#{Stage (position) encoder assigned port number}
;>b_MotEncPortN_P = 2;#{Motor (velocity) encoder assigned port number}
;>a_AbsEncPortN_P = 2;#{Absolute encoder assigned port number (Set to none to free up the channel for other axes)}
;>a_InitPhasePort_P = 2;#{Initial phase position port (Set to hall Effect inputs port for Servos. Seting to axis number will disable power-on protection and will auto-initialize Steppers at power-On)}
;>a_ContPhasePort_P = 2;#{Ongoing phase position port (encoder used for phasing)}
;>a_BrakePortN_P = 'none';#{Axis brake port number}
;>a_InterlockPortN_P = 'none';#{Interlock port number}
;>a_Commutation_D = 'DirectMicroStepping';Text{Commutation Algorithm}
;>b_PWMFreq_D = 20;kHz{MaxPhase/PWM Frequency }
;>b_PhaseClock_D = 10;kHz{Phase Clock Frequency }
;>b_ServoClock_D = 5;kHz{Servo Clock Frequency }
;>b_MotBusVdc_D = 48;volts{Motor bus VDC}
;>b_FullRangeCurr_D = 33850;mA{Full range current (GBLV feedback ADC full range}
;>b_MaxContCurr_D = 5000;mA{Max continuous current (GBLV RMS)}
;>b_ActualADCRes_D = 32767;counts{Actual ADC current feedback resolution}
;>b_AbsClockDiv_D = 2;{Absolute encoder Clock frequency}
;>s_MotType_S = 'USR00';{Motor type}
;;s_MotBrand_S = '?';{Motor manufacturer}
;>s_MotNphases_S = 2;#{Number of phases (set to 1 for steppers)}
;>s_MotNPoles_S = 100;#{Number of poles (set to ? for steppers)}
;>s_MotStepsPerRev_S = 200;#{Motor  full steps (or 1/4 electrical cycles) per mechanical revolution}
;>s_MotWiring_S = 'BiPar';{Motor wiring setup}
;>s_MotCurrRate_S = 3000;mA{Motor Current rating (continuous rms) Tpk / Kt for BLDC}
;>s_MotCurrInstantMax_S = 4500;mA{Motor maximum instant Current (instantaneous peak DC)}
;;s_MotResistance_S = '?';Ohms{Motor winding resistance (phase to phase)}
;;s_MotInductance_S = '?';H{Motor winding Inductance  (phase to phase)}
;;s_MotHoldingTorque_S = '?';Nm{Motor holding torque (Torque constant multiplied by current rating)}
;;s_MotRotorInertia_S = '?';kg.m2{Motor rotor inertia (best estimate)}
;;s_MotDetentTorque_S = '?';Nm{Motor detent torque}
;;s_MotVoltageConst_S = '?';V/krpm{Motor voltage constant V/KRPM (bipolar peak)}
;;s_MotRailVoltage_S = '?';volts{Motor nominal voltage}
;>s_MotVMax_E = 48;volts{Motor voltage (bipolar) at maximum}
;;s_MotPMFluxLinkage_S = '?';Nm/Amp{Motor maximum permanent magnet flux linkage (estimate)}
;;s_StageType_S = '?';{Stage type}
;>s_EGU_S = 'step';text{Engineering unit of motion}
;>s_EffectivePitch_S = 200;EGU/rev{Stage displacement per stage shaft turn}
;>s_InternalGearing_S = 1;ratio{Stage internal gearing ratio (not effective` not used)}
;>s_StageEncType_S = 'none';{Stage end encoder type (build)}
;;s_StageEncCtsPerPeriod_S = '47200?';{Primary encoder counts per fundamental translation/rotation period` before interpolation}
;;s_StageEncPeriodEGU_S = '360?';EGU{Primary encoder's fundamental translation/rotation period}
;;s_StageEncInterpolation_S = '2000?';{Stage encoder interpolation factor}
;;s_StageEncRes_S = '?';EGU/encct{Stage end encoder resolution}
;>s_MotEncRes_S = 0;ct/rev{Primary feedback encoder resolution (Motor end or equivalent of stage enc res if stage enc is used for primary feedback)}
;>s_MotEncMaxSpeed_S = 6;rev/sec{Motor end encoder/stage speed limit}
;>a_IsAbsEncUsed_E = 0;bool{Is Absolute encoder used (0 no - 1 yes)}
;;s_AbsEncType_S = 'RL26BAT050B05A?';bool{Absolute encoder part no}
;;a_AbsEncProto_S = 'BiSS-C?';{Absolute encoder Protocol}
;>s_AbsEncCRC_S = $;hex{Absolute encoder BiSS Protocol CRC Mask}
;>s_AbsEncBits_S = 24;bits{Absolute encoder serial buffer bit length (resolution ST+MT)}
;;s_AbsEncOffsetBits_S = '0?';bits{Absolute encoder offset location of LSB}
;;s_AbsEncStatusBits_S = '2?';bits{Absolute encoder BISS encoder - number of status bits}
;;s_AbsEncParity_S = '0?';bits{Absolute encoder parity (0 none`1 odd`2 even)}
;>s_AbsEncTrigMode_S = 0;Bool{Absolute encoder trigger mode (0 conti` 1 single)}
;>s_AbsEncTrigEnabled_S = 1;Bool{Absolute encoder trigger enabled (0 disable` 1 enable)}
;>a_AbsEncTrigDelay_E = 0;ticks{Absolute encoder trigger enabled (0 disable` 1 enable)}
;>s_AbsEncGray_S = 0;Bool{Absolute encoder Gray encoding (0 disable` 1 enable)}
;>s_AbsEncSenc_S = 1;Bool{Absolute encoder Senc (0 disable` 1 enable)}
;>s_AbsEncSigned_S = 0;Bool{Absolute encoder signed (0 unsigned` 1 signed)}
;>a_AbsEncShifting_E = 1;Bool{Absolute encoder 5 bit Shifting (0 disable` 1 enable)}
;;s_FullStroke_S = '?';EGU{Stage motion range}
;;s_StageRotInertia_S = '?';kg.m2{Stage rotational inertia}
;;s_LoadNominal_S = '?';kg{Stage effective load}
;;s_BreakawayTorque_S = '?';Nm{Stage breakaway friction torque max at motor}
;;s_RunningTorque_S = '?';Nm{Stage running friction torque max at motor}
;>s_ReverseEfficiency_S = 1;ratio{?2 = reverse efficiency (0.8 to 0.9 for ball screws)}
;>s_ForwardEfficiency_S = 0.1;ratio{Forward efficiency}
;>s_ViscousFrictCoeff_S = 0;N*m/(rad/s){Viscous Friction Coefficient}
;>s_WiringResistance_E = 1;Ohms{Phase wiring resistance}
;>s_LoadTransRadi_E = 0;m{Load translation effective radius (meters)}
;>s_LoadDisturbance_E = 0;Nm{Phase wiring resistance}
;>b_CurrSensorNoise_E = 0.015;mA peak{Phase wiring resistance}
;>a_MagCurrOLFactor_E = 0.2;ratio{Contingency factor for open loop current}
;>a_CurrLimContin_E = 0;mA peak{Continuous current limit}
;>a_CurrLimInstant_E = 4500;mA peak{Instantaneous current limit}
;>a_CurrLimIntegral_E = 0;mA{Integrated current limit}
;;e_MRES_U = 'none?';EGU/ct{Required position resolution to match existing motor record}
;>e_REVERSED_U = 0;Bool{Required position direction to match existing motor record}
;>a_MotHarmonicN_E = 2;#{Motor's most significant mode of resonance (to avoid resonance at this Nth harmonic)}
;>a_PositionPrecision_U = 0.0625;EGU{Axis position precision}
;>a_PositionBand_U = 0.125;EGU{Axis position band (In-Position notification band)}
;>a_VelPrecision_U = 20;EGU/sec{Design velocity precision}
;>a_VelHi_U = 20;EGU/sec{Requirement maximum operational velocity}
;>a_VelLo_U = 20;EGU/sec{Requirement minimum operational velocity}
;;a_SettlingTime_U = '?';sec{Requirement position settling time}
;>a_PosScaleFactor_E = 32;#{Servo Position Scale Factor (internal)}
;>a_VelScaleFactor_E = 32;#{Servo Velocity Scale Factor (internal)}
;>a_MaxVel_E = 200;EGU/sec{Design maximum operational velocity}
;>a_MagCurrMove_E = 250;mA peak{Magnetization current when moving}
;>a_MagCurrIdle_E = 100;mA peak{Holding (Idle) magnetization current}
;>a_HomingLimDir_E = 'MLIM_Plus';{Homing position and direction}
;>a_IsEncIndexHoming_E = 0;Bool{Encoder index used for homing}
;>a_IsIndexOnlyHoming_E = 0;Bool{Index mark at the edge of operational range will be used as home reference` (Hardware limits can be treated as fault condition)}
;>a_IsEncReadbackSet_E = 1;Bool{Encoder readback on companion axis}
;>a_HomingVel_E = 40;EGU/sec{Design homing velocity (absolute)}
;>a_HomingOffset_E = 0;EGU{Home offset to trigger point (direction relaltive to homing direction: negative means opposite to home search move)}
;>a_FatalFollowingError_E = 62.5;EGU{Fatal following error limit}
;>a_MaxLimEscape_E = 0.625;EGU{Maximum allowable escape distance at Abort/Limit}
;>a_AccelTimeRAPID_E = 100;msec{Accel/decel total Time for RAPID moves}
;>a_AccelTimeSCurve_E = 50;msec{Accel/decel S-Curve Time for RAPID moves (Time to speed)}
;>a_AccelRangeRAPID_E = 4;EGU{Maximum accel/decel range for RAPID moves}
;>a_AccelRangeLINEAR_E = 4;EGU{Maximum accel/decel range for LINEAR moves}
;>a_StepDesiredRatio_E = 2;ratio{Desired Step to Position Precision ratio}
;>a_DesiredStepRes_E = 0.03125;EGU/step{Desired motion (step) resolution (actual might be different)}
;>a_MicroStepsN_E = 32;#{Number of microsteps per full step (equivalent for non-step motors)}
;>a_ECycleSizeFold_E = 1;{Commutation cycle size folded by this factor if overrange in Ixx71}
;>a_PowerDownStgy_E = 'HoldOnly';text{Idle strategy (brake and/or hold)}
;>a_PowerDownLag_E = 1000;msec{Idle strategy lag time (set 0 to disable idle strategy)}
;>a_BrakeReleaseLead_E = 0;msec{Idle brake release lead time}
;>a_BrakeEngageLead_E = 950;msec{Idle brake engage lead time}
;>a_IsCmtnCL_E = 0;Bool{Commutation loop closed}
;>a_IsCmtnTinvExt_E = 1;Bool{Commutation phase position using 1/T extension or not}
;>a_IsKillOnLimit_E = 0;Bool{Action on hitting a hardware overtravel limit switch: 0=controlled deceleration 1=kill by enforcing fault}
;>a_IsKillCSOnFault_E = 0;Bool{Kill all axes of the same CS on any amplifier fault }
;>a_IsKillAllOnFault_E = 1;Bool{Kill all PMAC axes on any amplifier fault }
;>a_IsAmpFaultBit_E = 0;Bool{Amplifier-fault input function through the FAULTn input is 0=disabled 1=enabled}
;>a_AmpFaultPol_E = 1;Bool{Amplifier-fault input logic 0=zero is fault 1=one is fault}
;>a_IsHiResCapture_E = 0;Bool{Capture with High-Resolution Feedback Bit}
;>a_IsCurrCL_E = 1;Bool{Current loop closed}
;>a_CurrGain_E = 1;{Current loop tuning overall gain}
;>a_CurrADCbits_E = 14;{Current loop ADC word length}
;>a_CurrLoopNF_E = 200;Hz{Current loop tuning natural frequency}
;>a_CurrLoopDamp_E = 0.7;ratio{Current loop tuning natural frequency}
;>a_CurrLoopFBRatio_E = 0;ratio{Current loop tuning Kpf to Kp (total) ratio}
;>a_CurrKpb_E = 1;mA/mA{Current loop tuning Kpb}
;>a_CurrKpf_E = 0;mA/mA{Current loop tuning Kpf}
;>a_CurrKi_E = 0.05;mA/mA/sec{Current loop tuning Ki}
;>a_IsPositionCL_E = 0;Bool{Is Closed Loop on Position on main axis}
;>a_PosCLEnc_E = 'Stage';Bool{Encoder used for position feedback}
;>a_IsVelocityCL_E = 0;Bool{Is Closed Loop on Velocity on main axis}
;>a_ServoKp_E = 32;D/EGU{Servo PID Overall (proportional) Gain}
;>a_ServoKd_E = 0;sec{Servo PID Derivative Gain}
;>a_ServoVff_E = 0;sec{Servo PID Velocity Feedforward}
;>a_ServoKi_E = 0;1/sec{Servo PID Integral Gain}
;>a_ServoAff_E = 0;sec^2{Servo PID Acceleration Feedforward}
;>a_ServoDbd_E = 0;EGU{Servo PID Position Deadband}
;>a_ServoBigStep_E = 8192;EGU{Servo PID Position Big Step limit}
;>a_ServoIntegLimit_E = 8192;EGU{Servo PID Integration Limit}
;>a_ServoIntegMode_E = 1;Bool{Servo PID Integration Mode: if set` integration will be disabled for non-steady state (commanded velocity<>0)}
;>a_ServoFrictionFF_E = 0;Nm{Servo PID Friction Feedforward}
;>a_ServoIntegOnVel_E = 0;Bool{Servo PID Integration on Velocity loop: if set` integration will be in velocity loop` otherwise in position loop (default) }
;>a_ServoSampleRatio_E = 1;ratio{Servo sampling ratio}
;>a_EncSampleRatio_E = 4;ratio{Encoder sampling ratio}
;>s_IsEncDirReversed_S = 0;Bool{Reverse encoder direction}
;>s_IsMotDirReversed_D = 0;Bool{Reverse motion direction}
;>a_IsLimitsDisabled_D = 0;Bool{Overtravel limits disabled}
;>a_AxisPosScaleDefault_E = 32;ct/EGU{Overall axis Position Scale default (this value will be used when information for calculating the actual value is not provided)}
;>a_MaxLimDecel_E = 2000;EGU/sec^2{Max allowable deceleration limit}
;>a_LimDecelLo_E = 50;EGU/sec^2{Minimum allowable deceleration at Abort/Limit}
;>a_TinvExt_D = 32;ct{1/T Extension}
;>a_IsDirectSprsd_E = 0;Bool{Supress direct current}
;>a_PosCmpRes_E = 0;EGU{Position compare resolution (0 if not used)}
;>a_PosCmpPulse_E = 0.01;unity{Position compare min pulse dutycycle}
;;a_PosCmpStart_E = '1?';EGU{Position compare Start Position (0 if not used)}
;;a_PosCmpUseCh1_E = '0?';Bool{Use Channel 1 encoder counter on IC for position compare}
;>a_PosCmpUsePLC10_E = 0;Bool{Use PLC10 instead of PLC8 for position compare}
;;a_NotchZfreq_E = '175?';Hz{Servo Notch filter Zeroes frequency (Hz)}
;;a_NotchZdamp_E = '0.05?';{Servo Notch filter Zeroes damping factor}
;;a_NotchPfreq_E = '180?';Hz{Servo Notch filter Poles frequency (Hz)}
;;a_NotchPdamp_E = '0.8?';{Servo Notch filter Poles damping factor}
;>a_IsNotchFilter_E = 0;Bool{Notch filter Active}
;>a_CmtAdvanceTime_E = 0;msec{Commutation lag time compensation}
;>b_IsTCompTable_E = 0;bool{Torque Compensation enabled}
;>a_TCompSize_E = 2;n{Torque Compensation table size}
;;a_TCompPosCounts_E = '80?';encct{Torque Compensation table size}
;;s_HomePhasePos_F = '?';{Phase position (as read by Mxx71) at encoder index position (offset should be also recorded)}
;;s_IndexPosAngle_F = '?';deg{Encoder index position Angle (with zero offset)}
;;s_RefPhasePosOffset_F = '?';ct/16{Offset to reference position (Ixx26) where phase position (Mxx71) is recorded` in encoder cts/16}
;;s_Ixx91_F = $?;hex{Power-On Phase Position Format (Hall effect sequence)}
;;s_Ixx29_F = '?';{First phase A current offset}
;;s_Ixx79_F = '?';{Second phase B current offset}
;;s_Ixx61_F = '?';{Current loop Ki (x1/4)}
;;s_Ixx62_F = '?';{Current Loop Kpf (x1/4)}
;;s_Ixx76_F = '?';{Current Loop Kpb (x1/4)}
;;s_StageMovDirCoord_F = '?';{Moving direction with reference to coordinates` moving positive by SLSA2 (twist axis with left hand rule)}
;;s_StageMovDirLimit_F = '?';PLIM/MLIM{Moving direction with reference to limit switch` moving positive by SLSA2}
;;s_ServoDbd_F = '?';EGU{Servo PID Position Deadband}
;;a_CurrHold_F = '?';mA{Minimum holding current to hold within a full step}
;;a_CurrHoldMicroStep_F = '?';mA{Minimum holding current to hold position to microstep}
;;a_CurrDrivePlusMin_F = '?';~mA{Minimum driving current for plus direction moves}
;;a_CurrDriveMinusMin_F = '?';~mA{Minimum driving current for minus direction moves}
;;s_FullStrokeCts_F = '?';ct{Full stroke counts between hard limits}
;;a_FullStrokeSoftEGU_E = '?';EGU{Motion range EGU between start and end of run including home offset}
;;a_HomeRelPos_F = '?';%{Home position relative to fullstroke %}
;;s_Ixx56_F = '?';Ixx09*32/2048{Commutation Delay Compensation}
;;s_Ixx68_F = '?';{Friction Feedforward}
;;s_Ixx69_F = '2000?';~mA{Output Command Limit}
;;s_BacklashSize_F = '0.005?';EGU{Overall backlash size}
;>b_ICNumber_X = 0;#{Servo IC number}
;>b_ChannelN_X = 2;#{Servo IC Channel number where the encoder is connected}
;>b_ServoTimeScale_X = 1;msec{Time base scaling: divide msec values by this scale}
;>a_IsAmpModeServo_X = 0;Bool{Is amplifier set in Servo mode(0=Quad AA~ BB~  1=UVW)}
;>a_IsAxisScaleSpecd_X = 1;Bool{Axis scale is specified}
;>a_IsEncoderUsed_X = 1;Bool{Encoder in use}
;>a_IsVelReqSpecd_X = 0;Bool{Velocity requirements are specified}
;>a_IsHomingEOT_X = 1;Bool{Hard EOT limits are used for homing}
;>a_PhasingAdvance_X = 0;deg{Commutation advance phase max speed (phase advance)}
;>s_StageClass_X = 'Holder';{Stage type}
;>s_OBSActualADCbits_X = 32767;{Actual ADC current feedback resolution (OBS NOT USED)}
;>a_HomingDirection_X = 1;{Homing direction: 1 is positive` -1 is negative}
;>a_HomingOffsetMin_X = 0.625;EGU{Minimum directional homing clearance (recommended offset)}
;>b_CurrConvScale_X = 1.033;mA/ADCCount{Actual current conversion scale}
;>a_MotFullSteps_X = 200;step/rev{Motor full steps per revolution}
;;s_MotTorqueConst_X = '?!';Nm/A{MotorTorque constant estimate}
;;s_MotVoltageConst_X = '?!';V/krpm{Motor Voltage constant estimate}
;>a_AxisPosScale_X = 32;ct/EGU{Overall axis Position Scale}
;>e_OutputFile_X = 'SR00ID01USR00_MOT2';{Output file name}
;>e_EpicsPVName_X = 'SR00ID01USR00:MOT2';{EPICS Motor base PV}
;>e_AxisN_X = 2;#{Axis number}
;>e_AxisCompanionN_X = 10;#{Companion axis number}
;>e_StageEncPortN_X = 2;#{Stage (position) encoder port number}
;>e_MotEncPortN_X = 2;#{Motor (velocity) encoder port number}
;>e_P400_x_X = $122;hex{Fault protection control bits (Enc=b0`Amp=b1`WrongLim=b16` Interlock=b17)}
;>e_HomingLimDir_X = 'MLIM_Plus';{Homing position and direction}
;>e_VELO_X = 20;EGU/sec{EPICS velocity}
;;e_MotionDirection_X = '?';{EPICS direction}
;>e_ACCL_X = 0;sec{EPICS time to speed (Acceleration)}
;>e_ADDR_X = 2;#{EPICS address}
;>e_MRES_X = 0.03125;EGU/ct{Actual position resolution (EPICS motor record MRES)}
;>e_PREC_X = 2;{Actual position precision (EPICS motor record PREC)}
;>e_EGU_X = 'step';text{Engineering unit of motion}
;>e_DHLM_X = 4999;EGU{Soft limit high` estimated for 2.5% clearance at each end}
;>e_DLLM_X = -4999;EGU{Soft limit high` estimated for 2.5% clearance at each end}
;>e_ERES_X = 0;EGU/ct{Encoder position resolution (EPICS motor record MRES)}
;>e_VMAX_X = 200;EGU/sec{EPICS maximum velocity}
;>e_UREV_X = 200;EGU/rev{EGU's per Revolution (EPICS motor record UREV)}
;>e_SREV_X = 6400;ct/rev{EPICS motor record counts per revolution}
;>e_PhasePosAtHome_X = -1;ct{Phase position for fine phasing to be set to Mxx71 when resting at home}
;>e_PosCmpPLC_X = 'None';text{Position compare PLC}
;>s_IsStageSLSA2_X = 0;Bool{Stage consistency` moving by SLSA2}
;>a_StageStepRes_X = 0.03125;EGU/step{Design stage movement resolution}
;>a_MotEncEffectiveRes_X = 0;EGU/encct{Motor end encoder effective resolution at stage movement}
;>a_MicroStepsPerRev_X = 6400;step/rev{Micro steps per motor revolution}
;>a_MotSpeedMax_X = 1;rev/sec{Motor speed at max}
;>a_MotAccelMax_X = 5000;EGU/sec^2{Motor acceleration at max (non-directional)}
;>a_MotDecelMax_X = 32000;EGU/sec^2{Motor deceleration at max}
;;a_MotPhaseFreqRatioMax_X = '?!';ratio{Motor Phase frequency to resonance Frequency ratio at max}
;>a_MotPhaseFreqMax_X = 0.05;kHz{Motor phase frequency at max}
;;a_MotLoadTorque_X = '?';Nm{Motor maxtourque for nomial load s_LoadNominal_S}
;;a_MotHoldTorque_X = '?';Nm{Motor holding tourque for nomial load s_LoadNominal_S}
;>a_MotHoldsIdle_X = 0;bool{Stage holds its position within a full step at all operational situations` when motor is idle (killed)}
;;a_EncCntPerPrec_X = '?!';encct{Best position feedback resolution to precision ratio (at stage end) }
;>a_EncCntPerStep_X = 0;encct/steps{Best position feedback resolution to step resolution ratio (at stage end)}
;>a_EncResBest_X = 0;EGU/encct{Best position feedback resolution at stage end}
;>a_EncPulsFreq_X = 0;kHz{Encoder pulse frequency at Max velocity}
;>a_EncSamplingFreq_X = 9830.4;kHz{Encoder sampling frequency}
;;a_FullStrokeTimeAtMax_X = '?!';sec{Full stroke travel time at max}
;>a_EcycleSpeedMax_X = 18;deg/msec{Speed in terms of electrical cycles per msec at max}
;>a_EPhaseResAtMax_X = 1.8;deg{Electric phase angle resolution at maximum speed by phase loop sampling rate}
;>a_CommandRateAtLo_X = 0.128;step/sample{Jog (RAPID) servo Command size (steps) at max}
;;a_VelAbsMax_X = '?!';EGU/sec{Absolute maximum continuous controllable velocity based on following error}
;;a_PWMVoltageRes_X = '?!';volts{Actual voltage control resolution over curr loop time constant}
;;a_PWMCurrResMax_X = '?!';mA{Actual current control resolution at still}
;;a_PWMTorqueResMax_X = '?!';Nm{Actual torque control resolution at still}
;;a_MotEffectiveRpn_X = '?!';Ohms{Efective phase to neutral resistance}
;;a_MotEffectiveLpn_X = '?!';H{Efective phase to neutral inductance}
;;a_PhaseDCResistence_X = '?!';Ohms{Actual effective DC resistance phase to phase}
;>a_VelResPerServo_X = 156.25;EGU/sec{Effective velocity resolution ( 1 sample per slowest servo loop mode)}
;>a_PosCmpFreqMax_X = 0;Hz{Position compare pulse frequency at max speed (0 if not used)}
;;a_MotResonanceFreq_X = '?!';kHz{Motor resonance most significant harmonic frequency Fn}
;;a_PhaseImpedanceMax_X = '?!';Ohms{Overall phase impedance including wiring` at max speed}
;;a_PhaseDriveVMax_X = '?!';volts{Overall phase driving voltage at max (including voltage loss at wiring)}
;>a_PhaseDriveCurrRMS_X = 176;mA rms{Phase actual direct driving rms current}
;;a_CurrDriverRatio_X = '?!';ratio{Plus to Minus minimum drive current ratio}
;;a_PWMFreqMin_X = '?!';kHz{Minimum required PWM Frequency}
;>a_PhaseIdleCurrRMS_X = 100;mA rms{Phase actual Idle rms current}
;;a_MotPowerIdle_X = '?!';Watt{Power dissipation at motor when holding}
;>a_IsBrakeUsed_X = 0;{Is brake used flag}
;>a_ServoCycleTime_X = 0.0002;sec{Servo update time (sample period)}
;;a_SCyclesPerSettleTime_X = '?!';Cycles{Servo cycles per settling time}
;>a_PosResAtVelMax_X = 0.04;EGU{Position resolution by sampling at servo frequency at maximum velocity}
;;a_NotchBetaZ_X = '?!';{Notch Zeroes Beta factor}
;;a_NotchBetaP_X = '?!';{Notch Poles Beta factor}
;;a_NotchAlphaZ_X = '?!';{Notch Zeroes alpha factor}
;;a_NotchAlphaP_X = '?!';{Notch Poles alpha factor}
;;a_CurrLoopNF_X = '?!';Hz{Actual Current loop tuning natural frequency}
;>a_CmtnNCyclesCts_X = 4096;ct{Counts per N commutation cycles (N phase electrical cycle)}
;>a_CmtnCycleSize_X = 81.92;ct{Commutation cycle size (Single electrical cycle)}
;>a_CurrFeedbackImp_X = 2.83604135893648;Ohms{Current loop feedback equivalent impedance}
;;a_CurrKp_X = '?!';mA/mA{Current loop theoretical tuning Kp (x1/4)}
;;a_CurrKi_X = '?!';mA/mA/sec{Current loop theoretical tuning Ki (x1/4)}
;>a_ReadAbsPos_X = $3524;hex{Absolute encoder readback address}
;>a_ReadINCPos_X = $3502;hex{QuadAB Encoder readback address}
;>a_ReadOLPos_X = $350E;hex{QuadAB Encoder readback address}
;>a_ReadAbsRawPos_X = $78B24;hex{Absolute Encoder raw readback address}
;;a_AbsEncGlobalReg_X = $Null;hex{Absolute Encoder raw readback address}
;;M208 = 'Null';ct{Position Compare A cmp trigger}a_Mxx08_E
;;M209 = 'Null';ct{Position Compare B cmp trigger}a_Mxx09_E
;;M210 = 'Null';ct{Position Compare Auto-Increment}a_Mxx10_E
;;M211 = 'Null';ct{Position Compare Enable direct write}a_Mxx11_E
;;M212 = 'Null';ct{Position Compare Initial state}a_Mxx12_E
I10 = 1677653;msec/8`388`608{Servo Interrupt Time}b_I10_E
I30 = 1;bool{Compensation Table Wrap Enable  //XVal=}b_I30_E
I51 = 0;bool{Compensation Table  Enable}b_I51_E
I35 = 0;bool{Brick LV & Controller E-Stop Enable}b_I35_E
;;I65 = 'null';{Brick identifier}b_I65_E
I7000 = 1473;{MaxPhase/PWM Frequency Control}a_I7m00_E
I7001 = 3;{Phase Clock Frequency Control}a_I7m01_E
I7002 = 1;{Servo Clock Frequency Control }a_I7m02_E
I7003 = 2258;{Hardware Clock Control }a_I7m03_E
I7004 = 3;{PWM Deadtime/PFM Pulse Width Control  //XVal=}a_I7m04_E
I7020 = 3;bits{Servo IC m Channel n Encoder Capture Control. 2=Flag high` 10=Flag low` 1=Index high` 5=Index low}a_I7mn0_E
I7021 = 0;Bool{Servo IC m Channel n Position Compare Channel Select}a_I7mn1_E
I7022 = 10;bits{Servo IC m Channel n Capture Control}a_I7mn2_E
I7023 = 2;bits{Servo IC m Channel n Capture Flag Select Control 1=PLIM` 2=MLIM` 0=HOME}a_I7mn3_E
I7026 = 0;bits{Servo IC m Channel n Output Mode Select}a_I7mn6_E
I7029 = 0;bits{Servo IC m Channel n Hardware-1/T Control}a_I7mn9_E
I200 = 1;bool{Axis enabled/disabled}a_Ixx00_E
I1000 = 1;bool{Companion axis enabled/disabled}a_Icc00_E
I201 = 1;2bits{Commutation enabled}a_Ixx01_E
I202 = $7800A;hex{Command Output Address}a_Ixx02_E
I203 = $350E;hex{Position Loop Feedback Address}a_Ixx03_E
I1003 = $3502;hex{Companion axis position readback address}a_Icc03_E
I204 = $350E;hex{Velocity Loop Feedback Address}a_Ixx04_E
I1004 = $3502;hex{Velocity Loop Feedback Address comp axis}a_Icc04_E
;;I207 = 96;{Master (Handwheel) Scale Factor  //XVal=}a_Ixx07_E
I208 = 32;{Position Scale Factor}a_Ixx08_E
I1008 = 32;{Position Scale Factor companion axis}a_Icc08_E
I209 = 32;{Velocity-Loop Scale Factor}a_Ixx09_E
I1009 = 32;{Velocity-Loop Scale Factor companion axis}a_Icc09_E
I210 = $0;hex{Power-On Servo Position Address}a_Ixx10_E
I1010 = $0;hex{Power-On Servo Position Address}a_Icc10_E
I211 = 32000;ct/16{Fatal following error limit}a_Ixx11_E
I212 = 16000;ct/16{Warning following error limit}a_Ixx12_E
;;I213 = 159968;ct{Positive Software Position Limit  //XVal=}a_Ixx13_E
;;I214 = -159968;ct{Negative Software Position Limit  //XVal=}a_Ixx14_E
I215 = 1.024;ct/smsec^2{Abort/Lim deceleration rate}a_Ixx15_E
I216 = 6.4;ct/smsec{Maximum Velocity}a_Ixx16_E
I217 = 0.16;ct/smsec^2{Maximum LINEAR Acceleration}a_Ixx17_E
I219 = 0.16;ct/smsec^2{Maximum RAPID Acceleration}a_Ixx19_E
I220 = 100;smsec{RAPID Acceleration time}a_Ixx20_E
I221 = 50;smsec{RAPID S-Curve time}a_Ixx21_E
I222 = 0.64;ct/smsec{Jog Speed}a_Ixx22_E
I223 = 1.28;ct/smsec{Homing Speed And Direction}a_Ixx23_E
I224 = $800401;hex{Flag Mode Control}a_Ixx24_E
I225 = $78008;hex{Position-capture flags address (including limits)}a_Ixx25_E
;;I1025 = $78008;hex{Companion axis position-capture flags address}a_Icc25_E
I226 = 0;ct/16{Home Offset}a_Ixx26_E
I228 = 64;ct/16{In-Position band}a_Ixx28_E
I229 = 0;{First phase A current offset  //XVal=}a_Ixx29_E
I230 = 16384;{Servo PID Proportional Gain}a_Ixx30_E
I231 = 0;{Servo PID Derivative Gain (acts on Motor Position feedback)}a_Ixx31_E
I232 = 0;{Servo PID Velocity Feedforward}a_Ixx32_E
I233 = 0;{Servo PID Integral Gain}a_Ixx33_E
I234 = 1;{Servo PID Integration Mode}a_Ixx34_E
I235 = 0;{Servo PID Acceleration Feedforward}a_Ixx35_E
I236 = 0;{Servo PID Notch Filter Coefficient N1}a_Ixx36_E
I237 = 0;{Servo PID Notch Filter Coefficient N2}a_Ixx37_E
I238 = 0;{Servo PID Notch Filter Coefficient D1}a_Ixx38_E
I239 = 0;{Servo PID Notch Filter Coefficient D2}a_Ixx39_E
I240 = 0;{Trajectory filter constant}a_Ixx40_E
I241 = 0;ct{Desired position limit band (has nothing to do with deadband or In-Position band)  //XVal=}a_Ixx41_E
I256 = 0;Ixx09*32/2048{Commutation Delay Compensation}a_Ixx56_E
I257 = 0;~mA{Continuous current limit}a_Ixx57_E
I258 = 0;~mA.sec{Integral current limit}a_Ixx58_E
I260 = 0;{Servo Cycle Period Extension Period}a_Ixx60_E
I261 = 0.05;{Current loop Ki (x1/4)}a_Ixx61_E
I262 = 0;{Current Loop Kpf (x1/4)}a_Ixx62_E
I264 = -16;{Deadband gain  //XVal=}a_Ixx64_E
I263 = 4194304;{Servo PID Integration limit}a_Ixx63_E
I265 = 0;ct/16{Servo PID Position following deadband size}a_Ixx65_E
I266 = 1474;/I7m00{Output PWM Scale}a_Ixx66_E
I267 = 4194304;ct/16{Servo PID Position Error Limit}a_Ixx67_E
I268 = 0;ct/16{Servo PID Friction Feedforward}a_Ixx68_E
I269 = 4356;~mA{Output Command Limit}a_Ixx69_E
I279 = 0;{Second phase B current offset  //XVal=}a_Ixx79_E
I270 = 1;#{Number of Commutation Cycles (N)}a_Ixx70_E
I271 = 4096;{Commutation cycle size (N phase electrical cycle)}a_Ixx71_E
I272 = 512;{Commutation phase angle}a_Ixx72_E
I273 = 0;~mA{Phase Finding Output Value (magnitude of the open-loop phasing search output)}a_Ixx73_E
I274 = 0;ServoCycles{Phase Finding Time}a_Ixx74_E
I275 = 0;{Phase Position Offset}a_Ixx75_E
I276 = 1;{Current Loop Kpb (x1/4)}a_Ixx76_E
I277 = 96;~mA{Magnetization current}a_Ixx77_E
I278 = 0;{Slip Gain}a_Ixx78_E
I280 = 0;bits{Motor Power-On mode }a_Ixx80_E
I1080 = 0;bits{Motor Power-On mode }a_Icc80_E
I281 = $350D;hex{Power-On Phase Position Address}a_Ixx81_E
I1081 = $0;hex{Companion axis Power-On Phase Position Address}a_Icc81_E
I282 = $7800E;hex{Current-Loop Feedback Address}a_Ixx82_E
I283 = $350E;hex{Ongoing Phasing Position Address}a_Ixx83_E
I284 = $FFFC00;hex{Current-Loop Feedback Mask Word}a_Ixx84_E
I285 = 0;{Backlash Take-Up Rate}a_Ixx85_E
I286 = 0;{Constant Backlash Parameter}a_Ixx86_E
I287 = 64;{Backlash Hysteresis}a_Ixx87_E
I290 = 0;{Rapid Mode Speed Select (0 means Ixx22 determines Jog speed)}a_Ixx90_E
I291 = $0;hex{Power-On Phase Position Format (Hall effect sequence)}a_Ixx91_E
I292 = 10;smsec{Jog Move Calculation Time}a_Ixx92_E
I295 = $0;hex{Power-On Servo Position Format}a_Ixx95_E
I1095 = $0;hex{Companion axis Power-On Servo Position Format}a_Icc95_E
I296 = 0;2bits{Command Output Mode Control (setting bit 0 to 1 will cause it to repeatedly zeroing the direct current-loop registers)}a_Ixx96_E
I297 = 1;bit{Position Capture Mode}a_Ixx97_E
I1097 = 0;bit{Companion axis Position Capture Mode}a_Icc97_E
P402 = 290;bits{Fault protection control bits (Enc=b0`Amp=b1`WrongLim=b5` Interlock=b6` NotInitialized=b8)}a_P400_x_E
P410 = 1;bits{Companion axis fault protection control bits (Enc=b0`Amp=b1`WrongLim=b16)}a_P400_c_E
P418 = 0;M-Var{Protections PLC: Interlock input M0 to M15}a_P416_x_E
P434 = 32000;ct/16{Protections PLC saved Fatal following error}a_P432_x_E
P466 = 0;bits{Protections PLC fault trip flag (reset at download)}a_P464_x_E
P510 = 25;sample{Diagnostics: ADC current averaging counts  //XVal=}a_P510_E
P530 = 500;sample{Diagnostics: Velocity variation averaging counts  //XVal=}a_P530_E
P550 = 0.99;sample{Diagnostics: Current regulation factor 0<r<1}a_P550_E
P602 = 1;{Amplifier setting servo=0 stepper=1}a_P600_x_E
P618 = -1;ct{Phase position for fine phasing to be set to Mxx71 when resting at home(-1 means do not set) }a_P616_x_E
P702 = 1000;msec{Idle strategy PLC: Timeout}a_P700_x_E
P718 = 950;msec{Idle strategy PLC: Brake engage time lead}a_P716_x_E
P734 = 242;~mA{Idle strategy PLC: Drive current control }a_P732_x_E
P750 = 40;%{Idle strategy PLC: Holding (idle) current as a percentage of drive current}a_P748_x_E
P766 = 0;M-Var{Hold strategy PLC: Brake output and brake mode. M32 to M39. 0 means no brake is used.}a_P764_x_E
;;P899 = 'Null';#{Position compare PLC8 axis parameter}b_P899_E
;;P898 = 'Null';#{Position compare PLC8 eaxis parameter}b_P898_E
;;P1099 = 'Null';#{Position compare PLC10 axis parameter}b_P1099_E
;;P1098 = 'Null';#{Position compare PLC10 eaxis parameter}b_P1098_E
P934 = 0;#{PLC9 amp mode fault counter (incremented each time PLC 6 is run - cleared manually)}a_P932_x_E
;;P908 = '0?';#{Motor type flag  //XVal=0?}b_P908_E
;;I8035 = $Null;hex{ECT entry for absolute encoder read}a_I8031_s2_E
;;I8034 = $Null;hex{ECT entry for absolute encoder read}a_I8030_s2_E
M4502 = $0;hex{Channel xx Absolute encoder control register}a_M4500_s_E
P4502 = $0;hex{Channel xx Absolute encoder control register saved value}a_P4500_s_E
;;M4598 = $Null;hex{Channels 1-4 Absolute encoder global control register}b_M4598_E
;;P4598 = $Null;hex{Channels 1-4 Absolute encoder global control register saved}b_P4598_E
;;M4599 = $?;hex{Channels 5-8 Absolute encoder global control register  //XVal=?}b_M4599_E
;;P4599 = $?;hex{Channels 5-8 Absolute encoder global control register saved value  //XVal=?}b_P4599_E
;;a_PhaseFreqMaxActual_X = 5;Hz{Actual phase frequency at max}
;>a_NotchGainActual_X = 1;{Notch filter gain}
;>a_CmtAdvanceTime_X = 0;msec{Commutation lag time compensation}
;>a_IsPositionCLActual_X = 0;{Is Closed Loop on Position}
;;a_IsSimPosCL_X = 1;{Is position feedback closed internally (simulated)}
;;a_MagCurrMoveActual_X = 250;mA{Magnetization current while active` handled by Powerdown strategy}
;;a_MagCurrIdleActual_X = 100;mA{Magnetization current while holding` handled by Powerdown strategy}
;;a_MicroStepsNActual_X = 32;ct{Actual microsteps}
;>a_PosCmpOutputChannel_X = 2;#{Position compare output channel (1-8)}
;;a_CurrLoopT90_F = '?';{Step response of the current loop}
;;a_MicroStepsPerRevActual_X = 6400;step/rev{Actual Micro steps per motor revolution}
;;a_MotPosScaleActual_X = '?';ct/rev{Actual motor counts per rev}
;;a_TestDistance_F = '?';EGU{Measured distance between test points}
;;a_TestDistanceCts_F = '?';ct{Measured distance between test points}
;;a_TestTimeAtMax_F = '?';sec{Measured time between test points}
;;a_VelAvgTest_X = '?!';ct/sec{Average velocity between test points}
;;a_MRESTest_X = '?!';EGU{Resolution estimate based on test}
;;s_BacklashTestCts_F = '?';ct{Backlash measured by testing}
;;s_BacklashTestEGU_F = '?';EGU{Backlash measured by testing}
;;a_TestOffsetCts_F = '0?';ct{Offset from a MLIM to PLIM to MLIM movement}
;;a_IsCurrDriveBalance_X = 0;bool{Does the motor provide enough idle holding torque at idle (killed)}
;>e_ConfigToolFile_X = 'SLSA MC config tool';{Configurator tool}
;>e_ConfigToolVersion_X = 190717113334;{Xmodel configurator tool Version}
;;e_ConfigToolCheckSum_X = '138298wip?';{Xmodel output checksum}
;>e_ConfigDateTime_X = '17/Jul/19-11:57';date{Xmodel output date}
;>e_LoadedFrom_P = 'C:\P4C\Dev\SBS\3_Beamlines\Common\IOC_Support\pmacUtil\pmc\SR00ID01USR00_MOT1.e.pmc';{Original source pmc file}
%100
;; // End
