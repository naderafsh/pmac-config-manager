;###########################################################
;;
;; PLC3_AutoPhase.pmc 
;; 
;; by Nader.Afshar@synchrotron.org.au 
;;   
;; This PLC is intended to be used for Automatic Fine Phase finding for BLDC
;; For group axes
;; 
;; Shares all P2xx variables with PLC2 
;; 
;; Routine energizes U phase on an ol BLDC to gradually move the shaft to the EC phase of 0 
;; deg. 
;; if successful, it clears the mxx48 phase flag
;; usage: 
;; set P297 to RequestAxis between 1..8 (ONE axis per run of PLC)
;; set p295 to additional wait time in seconds (TimeOut = (15+RequestWait)*60000)
;; set currMax		p290 to max magnetization current on phase U and W. 
;; CAUTION:
;; This depends on the load. Start low and if it fails, creep it up until it finds the phase.
;; Enable PLC3
;; Returns: 
;; run error/status code in p297
;; step progress in p291
;###########################################################


;Clean up jobs:
; "axis" --> "axis_number" to be compatible with DLS

#define CmtnResCts   361

#define incStepNotMoving  0.05
#define incStepMoving  0.01
;-------- DLS STATE DEFINITIONS -------------;
; Use a different timer for each PLC
#define timer1             i5212
; Make timer more readable
#define msec             * 8388608/i10
#define msecWait1        msec while (timer1 > 0) endw

; borrowed 2nd timer from PLC27 !!
#define timer2	I6412
#define msecWait2	     msec while (timer2 > 0) endw


#define uninit_bit_mask	256

; Homing State P Variable
;---- PLC variables
#define axis			P299    ;internal axis variable
#define TimeOut			P298	;internal, timeout in msec, preset to 3 min
#define	RequestAxis		P297	;user input, request axis number : resets to 0,-2,-3 (isNotMoved state)

#define isNotMoved	p296
#define RequestWait		P295    ;user input, timeout in seconds
; Homing Group P Variable
#define HomingGroup       P294
#define HomingBackupGroup P293

#define dummy	p292
#define progress	p291        ;user input 
#define currMax		p290        ;user input

#define incStep	p289            ;user input

#define AxisHomingState       P(200+axis)
#define StateIdle         0
#define StateConfiguring  1
#define StateMoveNeg      2
#define StateMovePos      3
#define StateHoming       4
#define StatePostHomeMove 5
#define StateAligning     6
#define StateDone         7
#define StateFastSearch   8
#define StateFastRetrace  9
#define StatePreHomeMove  10
AxisHomingState = StateIdle

; Homing Status P Variable
#define AxisHomingStatus      P(210+axis)
#define StatusDone        0
#define StatusHoming      1
#define StatusAborted     2
#define StatusTimeout     3
#define StatusFFErr       4
#define StatusLimit       5
#define StatusIncomplete  6
#define StatusInvalid     7

#define AxisPhaseDiff	P(220+axis)	;degrees


AxisHomingStatus = StatusDone

HomingGroup = 0
HomingBackupGroup = 0
;-------- DLS STATE DEFINITIONS -------------;

;-------- PMAC definitions
; Rename these to names suggested in "Turbo PMAC2 Variable Definitions"

#define HomeCompleteBit	M(axis*100+45)
#define InPositionBit	M(axis*100+40)
#define FollowingEBit	M(axis*100+42)
#define OnLimitBit	M(axis*100+30)
#define DesiredVel	M(axis*100+33)


#define HomeCompleteBit	M(axis*100+45)

#define PhasingErrorBit	M(axis*100+48)
#define PhasePos	M(axis*100+71)
#define PhaseSize	i(axis*100+71)
#define CmtnCycleSize   i(axis*100+71)/i(axis*100+70)
;-------- XModel definitions 
#define HomePhasePos   P(axis + 616)	
#define protection_tripped   P(axis + 464) ;P465..P480 

;additions on 1610
#define OutOffA i(axis*100+29)
#define OutOffB i(axis*100+79)
#define CompensCorr i(axis*100+69)
#define ContCurrLim i(axis*100+57)

#define brake                 P(axis + 764)
#define brake_output          M(dummy)

;Axis amplifier type setting: 0=Servo, 1=Stepper
#define axis_amp_type				 P(600+axis)


;set defaults ... or NOT?
currMax=100
RequestWait=15

;---------- PLC Code
OPEN PLC3 CLEAR

;------------ EXEC ----------
dis plc4
dis plc7
axis = int(RequestAxis+0.5)

TimeOut = (1+RequestWait)*1000
if (TimeOut > 5*60000) 
	TimeOut = 5*60000
endif

AxisHomingStatus=StatusHoming
AxisHomingState=StateConfiguring

PhasingErrorBit = 1 ;set the phase search error to re-initialise

timer1 = TimeOut msec
; start counting timeout
	
; Check if the axis is not a BLDC, which ought to be initialised using auto-phasing?

if (axis_amp_type > 0) ; Not a BLDC
    ; Action is simple $ initialisation
    RequestAxis = 0.5 ; returning: IN isNotMoved... 
endif

; This while loop only executes once. 
; using while only because the DISABLE PLC stops execution after an endwhile  
while (RequestAxis = 0.5) 
 	and (timer1 > 0) ; Check for timeout
	and (AxisHomingStatus = StatusHoming) ; Check that we didn't abort      
    ADDRESS#axis
    cmd "$"
    ;DEBUG CODE
    ;progress=progress-1
    ena plc4
    ena plc7
    dis PLC3 ; will stop executio after the next endwhile
    timer2 = 2000 msecWait2
    if (PhasingErrorBit > 0) 
        RequestAxis = -3 ; returning ERROR
    else
        RequestAxis=0 ; returning SUCCESS
    endif

endwhile

; If not stopped by now, then Auto-Phasing is the initialising method:

RequestAxis = -2

; Check if there are any protections tripped, other than uninitialised?

while (RequestAxis = -2) 
 	and (timer1 > 0) ; Check for timeout
	and (AxisHomingStatus = StatusHoming) ; Check that we didn't abort      
    if ((protection_tripped | uninit_bit_mask) != uninit_bit_mask)
    ; there are trips OTHER than uninit_bit_mask
      ena plc4 
      ena plc7
      dis PLC3 ; will stop executio after the next endwhile    
      RequestAxis = -3 ; returning: ERROR
      timer2 = 500 msecWait2
    else
      RequestAxis = 0.5 ; 
    endif
    
endwhile

; if not stopped here, then try to execute auto phase method:

; Run phasing with default parameters and axis parameters 

if (currMax > ContCurrLim)
	currMax = ContCurrLim
endif

dummy = brake
brake_output=1

ADDRESS#axis
cmd "k"
timer2 = 50 msecWait2
cmd "O0"
timer2 = 50 msecWait2

dummy=PhasePos
isNotMoved=1
progress=-1/incStepNotMoving

;gradually (1s) increase to phase position
;(OutOffB/2 < CompensCorr/2) and
while (progress<1/incStepMoving)
	dummy = abs(PhasePos - dummy)
	if ( dummy > PhaseSize/CmtnResCts) and (dummy < PhaseSize-PhaseSize/CmtnResCts)    ; is moved
        isNotMoved=0
        progress=0 
        incStep=incStepMoving       
	else ; not moved, reduce step if ever moved
		if (isNotMoved<1) ; already moved then stopped
            progress=progress+5
            OutOffA=0
		else    ;not moved yet, give it time
            progress=progress+1
            OutOffA=-OutOffB
		endif
        incStep=incStepNotMoving 
	endif
    dummy=PhasePos

    if (OutOffB+currMax*incStep < currMax)
      OutOffB=OutOffB+currMax*incStep
    endif
    ;OutOffA=0 

	timer2 = 100 msecWait2
endw
;set phasepos to 0
;if PhasePos is not changed then 
timer2 = 1000 msecWait2
while (progress>99) and (PhasingErrorBit>0) and (timer1 >0)
	PhasePos=0
	timer2 = 1000 msecWait2
	if (PhasePos<PhaseSize/CmtnResCts) or (PhasePos > PhaseSize-PhaseSize/CmtnResCts)
		PhasingErrorBit = 0
		RequestAxis=0 ; returning SUCCESS
	else
		RequestAxis=-2 ; returning RETRY...
	endif
endw
if (RequestAxis=0.5) 
	RequestAxis=-3 ; returning ERROR
endif
  ;deinitialise
cmd "k"
OutOffB=0
OutOffA=0

ena plc7
ena plc4
AxisHomingState=StateIdle
;------------ EXEC ----------
DISABLE PLC3
CLOSE
