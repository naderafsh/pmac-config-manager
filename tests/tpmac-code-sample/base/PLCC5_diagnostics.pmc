;####################################################
; DO NOT MODIFY: File created from src/PLC5_cpu_load.psub
;####################################################


CLOSE

;####################################################
; Calculation of CPU load for a Turbo PMAC
;
; Ronaldo Mercado 2009-04-14
; Mostly copied from "Turbo SRM.pdf" [1] 
; Adjusted P variables to be in the P5xx range as per 
; "PMAC Rules and Guidelines" [2]
; Modified original formula for end result P575, 
; to reflect a first order filter with alpha=1/16 (1/P576)
;
; [1] http://www.deltatau.com/fmenu/TURBO%20SRM.PDF page 17 (35 of 795)
; [2] http://www.cs.diamond.ac.uk/cgi-bin/wiki.cgi/PMAC_PLC_Rules_and_Guidelines 
;
; Macros:
; - PLC: plc number
;
; Result stored in
;  P575
; Uses variables 
;  P567..576
; and P500, P516..540
; Added test functionality
; Nader.Afshar@synchrotron.org.au
; Moving average calculation for ADC_A and ADC_B (m105, m106)
;
;
;####################################################
#define plcbase					500
; number of axes
#define naxis                    P999

#define axis_number              P(plcbase)
#define ADC_A     M(axis_number*100+5) ;
#define ADC_B     M(axis_number*100+6) ;

#define ADC_mavg_Factor     P(plcbase+10) ;
#define ADC_A_MaxAbs     P(plcbase+axis_number+10) ;
#define ADC_B_MaxAbs     P(plcbase+axis_number+20) ;
#define Vel_mavg_Factor     P(plcbase+30) ;
#define Vel_mavg     P(plcbase+axis_number+30) ;
#define Vel_var		P(plcbase+axis_number +40) 
#define ADC_A_avg  P(plcbase+axis_number + 50);
#define ADC_B_avg  P(plcbase+axis_number + 60);



#define ActVel		M(axis_number*100+66)*5/(i(axis_number*100+60)+1);servo cycle ;I(axis_number*100+09)*32/1000*2.5
#define AvgActVel		M(axis_number*100+74)*5

#define Vel_mavg_dum		P598
#define Vel_var_dum		P597
#define ActVel_dum		P596
#define AvgActVel_dum		P595



P510..560=0;
p530=50
p510=25



P570=4 ; 4 phase interrupts per servo interrupt
P576=16 ; Length of filter for averaging duty cycle

disable plc 5

OPEN PLCC 5 
CLEAR
    P571=M71/M70 ; Phase task duty cycle
    P569=INT(M72/M70) ; # of times phase interrupted servo
    P572=(M72-P569*M71)/(M70*P570) ; Servo task duty cycle
    P568=INT(M73/M70) ; # of times phase interrupted RTI
    P567=INT(M73/(M70*P570)) ; # of times servo interrupted RTI
    P573=(M73-P568*M71-P567*(M72-P569*M71))/(M70*P570*(I8+1))
    ; RTI task duty cycle
    P574=P571+P572+P573 ; Latest total foreground duty cycle
    P575=(P574+(P576-1)*P575)/P576 ; Averaged total foreground duty cycle
	axis_number = 1
;;	while(axis_number !> naxis)
    
      ADC_A_avg=(ADC_A_avg*ADC_mavg_Factor+ADC_A)/(ADC_mavg_Factor+1)
	  ADC_B_avg=(ADC_A_avg*ADC_mavg_Factor+ADC_B)/(ADC_mavg_Factor+1) 
    
	  if (abs(ADC_A_avg)>ADC_A_MaxAbs)
	    ADC_A_MaxAbs=abs(ADC_A_avg)
	  endif
	  if (abs(ADC_B_avg)>ADC_B_MaxAbs)
	    ADC_B_MaxAbs=abs(ADC_B_avg)
	  endif
	  ADC_A_MaxAbs=(ADC_A_MaxAbs*ADC_mavg_Factor+0)/(ADC_mavg_Factor+1)
	  ADC_B_MaxAbs=(ADC_B_MaxAbs*ADC_mavg_Factor+0)/(ADC_mavg_Factor+1) 
	  
	  AvgActVel_dum=AvgActVel
	  ActVel_dum=ActVel 
	  Vel_mavg_dum=Vel_mavg
	  Vel_var_dum=Vel_var
	  if (abs(AvgActVel_dum) > 20)
	    Vel_mavg_dum= (Vel_mavg_dum*Vel_mavg_Factor+AvgActVel_dum)/(Vel_mavg_Factor+1)
	  endif
	  if (abs(ActVel_dum) > abs(Vel_mavg_dum)/1.5) and (abs(ActVel_dum) < abs(Vel_mavg_dum)*1.5) ; noise 
	    Vel_var_dum=(Vel_var_dum*Vel_mavg_Factor+abs((ActVel_dum-Vel_mavg_dum)/Vel_mavg_dum*100))/(Vel_mavg_Factor+1)
	  endif
	  Vel_mavg=Vel_mavg_dum
	  Vel_var=Vel_var_dum
	  
	  axis_number=axis_number+1
      if (axis_number > naxis)
        axis_number = 1
      endif
;;	endwhile
	
    
CLOSE

ENABLE PLCC 5
