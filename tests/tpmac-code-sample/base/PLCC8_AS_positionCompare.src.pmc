CLOSE

;####################################################
;; \file
;; PLC for setting up position compare for a
;; a AS (geo)BRICK 
;; Needs baseConfig loaded
;;          The default is a comment to comment out geobrick specific settings in the program.
;####################################################

;;;################## NA_140409 parametres
#define axis_number P899
#define eaxis_number P898
#define caxis_number P897

;;;################## NA_140409 parametres

;; ###########  Geobrick specific setup ##########################

#define HomeCaptPos M(eaxis_number*100+73)

#define pCmpAutoIncr m(eaxis_number*100 +10)
#define pCmpA m(eaxis_number*100 +08)
#define pCmpB m(eaxis_number*100 +09)
#define pCmpInitVal m(eaxis_number*100 +12)
#define pCmpOut m(eaxis_number*100 +13)
#define pCmpInitialise m(eaxis_number*100 +11)=1

#define homeOffRaw i( 26 + 100 * axis_number )/16

#define companionActPos m(caxis_number*100 +62)


;; Start of position compare window
#define start p881
;; End of position compare window
#define stop p882
;; Step used for auto increment of position compare registers
#define step p883
;; Distance between compare registers in auto increment mode
#define pulse p884

;; This is the saved home offset
#define savedHomeOffset p801

#define lastTriggerStatus p802

;; This is the motor pos
#define currentPos p803
;; This is the motor velo
#define currentDir p804

#define CmpAutoIncr p805

;; This is the value to be written to position compare register A
;#define cmpA p807
;; This is the value to be written to position compare register B
;#define cmpB p808


lastTriggerStatus=0


OPEN PLCC 8
CLEAR

; Just put the last trigger position, onto the companion axis readback value.
; Position will be raw encoder counts, so companion axis user scale will translate the counts to 
; user coord. It is necessary to have the compamnion axis user coordinate matching  the main axis 
; for the RBV values to be comparable.

; Get the current motor position and velo
currentPos=m(axis_number*100 +62)/(I(axis_number*100 +08)*32)
currentDir=m(axis_number*100 +74)

; posComp raw encooder positions to dial coord 
savedHomeOffset = HomeCaptPos + homeOffRaw
;cmpA = pCmpA - savedHomeOffset
;cmpB = pCmpB - savedHomeOffset

; Find WHICH Cmp is BEHIND, which is the one last hit
if (pCmpOut != pCmpInitVal)
  ; a new trigger has happened if cmpOut has just fell
  if (lastTriggerStatus!=1)
      if (currentDir > 0)
        ;ASSUME already triggering, AND direction is not reversed since last falling edge
        ; for AS_posComp => pCmpOut=0 corresponds to cmpB < currentPos < cmpA
        ; => cmpA is next, cmpB is last Hi to Lo transition
        companionActPos = pCmpB*(I(caxis_number*100 +08)*32) 
      else
        companionActPos = pCmpA*(I(caxis_number*100 +08)*32)
      endif
      companionActPos = companionActPos - (HomeCaptPos) *(I(caxis_number*100 +08)*32) 
      companionActPos = companionActPos - (homeOffRaw) *(I(caxis_number*100 +08)*32) 
      
      ; falling edge captured, don't come here again unless a rising edge is captured
      lastTriggerStatus=1
  endif
else
    ;rising edge is captured
      lastTriggerStatus=2      
  endif

CLOSE

DISABLE PLC 8
