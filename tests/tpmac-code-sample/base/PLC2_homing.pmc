;###########################################################
;; PLC2_homing.pmc 
;; 
;; by Nader.Afshar@synchrotron.org.au 
;;   
;; This PLC is intended to contain parametrised homing routines
;; For group axes
;; 
;; reserves all P2xx variables
;; 
;; Routine sets the EC phase for BLDC motors stored in p(axis + 616)
;; if motor type is BLDC according to p(axis + 600) 
;; wont change the phase and returns with error if fine phase offset is >60deg absolute
;; 
;; Routine also works for steppers
;; usage: 
;; set P297 to RequestAxis between 1..8 (ONE axis per run of PLC)
;; set p295 to additional wait time in seconds (TimeOut = (3+RequestWait)*60000)
;; Enable PLC2
;; Returns: 
;; run error/status code in p297
;; AxisHomingState       P(200+axis)
;; AxisHomingStatus    p(210+axis)
;###########################################################



;-------- DLS STATE DEFINITIONS -------------;
; Use a different timer for each PLC
#define timer             i5211
; Make timer more readable
#define MilliSeconds      * 8388608/i10

; Homing State P Variable
;---- PLC variables
#define axis			P299
#define TimeOut			P298	;timeout in milliseconds, preset to 3 min
#define	RequestAxis		P297	;request axis number 
#define	PLC2Status		P296	;request axis number 
#define RequestWait		P295
; Homing Group P Variable
#define HomingGroup       P294
#define HomingBackupGroup P293
#define Dummy	p291


#define AxisHomingState       P(200+axis)
#define StateIdle         0
#define StateConfiguring  1
#define State2_Stabilising      2
#define State3_Capturing      3
#define State4_PostHmMove       4
#define State5_HomedOrNot     5
#define State6_Phasing 6
#define State7_Finished         7
#define State8_PCmpInit   8
#define State9_PostHmMove  9
#define StatePreHomeMove  10
AxisHomingState = StateIdle

; Homing Status P Variable
#define AxisHomingStatus      P(210+axis)
#define StatusDone        0
#define StatusHoming      1
#define StatusAborted     2
#define StatusTimeout     3
#define StatusFFErr       4
#define StatusLimit       5
#define StatusIncomplete  6
#define StatusInvalid     7

#define AxisPhaseDiff	P(220+axis)	;degrees
#define AxisPosDiff	P(230+axis)	;counts

AxisHomingStatus = StatusDone

HomingGroup = 0
HomingBackupGroup = 0
;-------- DLS STATE DEFINITIONS -------------;

;-------- PMAC definitions


#define HomeCompleteBit	M(axis*100+45)
#define InPositionBit	M(axis*100+40)
#define FollowingEBit	M(axis*100+42)
#define OnLimitBit	M(axis*100+30)
#define DesiredVel	M(axis*100+33)


#define HomeCompleteBit	M(axis*100+45)

#define PhasingErrorBit	M(axis*100+48)
#define PhasePos    M(axis*100+71)

#define ActVel      m(axis*100+66)/(I(axis*100+9)*12.8) ; for phase cycle of 10kH
#define AvgActVel   m(axis*100+74)/(I(axis*100+9)*6.4) ; for servocycle of 5kHz

#define HomeSearchVel i(axis*100+23)

#define PhaseSize	i(axis*100+71)
#define AxisEnable	i(axis*100)

#define HomeCaptPos M(axis*100+73)

;; ###########  Geobrick specific setup ##########################

; PLCC8_AS setups
#define pCmpOffset    P279
#define eaxis_number   P898
#define CmpAutoIncr p805
#define lastTriggerStatus p802

#define pCmpAutoIncr m(eaxis_number*100 +10)
#define pCmpA m(eaxis_number*100 +08)
#define pCmpB m(eaxis_number*100 +09)
#define pCmpInitVal m(eaxis_number*100 +12)
#define pCmpInitialise m(eaxis_number*100 +11)=1

#define mxMRES P(4800 + axis)
#define mxPoffUsr  P(4900+axis)
#define mxPoffRaw mxPoffUsr/mxMRES
#define homeOffRaw i( 26 + 100 * axis )/16

;-------- XModel definitions 
#define HomePhasePos P(axis + 616)

;---------- PLC Code
OPEN PLC2 CLEAR

;------------ EXEC ----------
TimeOut = (1+RequestWait)*1000
if (TimeOut > 5*60000) 
	TimeOut = 5*60000
endif

if (RequestAxis > 0.5) 
	;initialise
	axis = RequestAxis
	AxisHomingStatus=StatusHoming
	AxisHomingState=StateConfiguring
	PLC2Status=0.5; running
	RequestAxis=PLC2Status; Backward compatibility
endif
if (RequestAxis < -3)
	PLC2Status=-3 ; invalid request
	RequestAxis=PLC2Status; Backward compatibility
	AxisHomingStatus=StatusInvalid
	AxisHomingState=StateIdle
    axis=0
endif

if (axis <1) 
	;nothing to do
	PLC2Status = 0
	RequestAxis=PLC2Status; Backward compatibility
endif

;---- Homing State ---- ;;NA: this can be different than a standard home move if the axes are moved by FastRetrace move above... 
if (PLC2Status=0.5)
and (AxisHomingStatus=StatusHoming)
and (AxisHomingState=StateConfiguring)
	; Execute the move commands
    
	if (abs((HomeSearchVel-AvgActVel)/HomeSearchVel) > 1.01)
		AxisHomingState=State2_Stabilising
        ADDRESS#axis
        cmd "j/"
	endif
    
	while (AxisHomingStatus=StatusHoming)
    and (abs((HomeSearchVel-AvgActVel)/HomeSearchVel) > 1.01)
		AxisHomingState=State2_Stabilising
	endwhile
    
    
    ; EPICS Settling Time MUST BE ZERO
    ; because of an internal issue:
    ; If the hm move is invoked while motor is deccelerating to stop,
    ; then the hm move will be interrupted incomplete, when motor reaches its 
    ; target stop and InPosition will be set
    ; EPICS Settling Time MUST BE ZERO
    
	;take note of the old position capture value
	Dummy = HomeCaptPos
    ADDRESS#axis
	cmd "hm"
	AxisHomingState=State3_Capturing
	; Wait for the move to complete
	timer = 20 MilliSeconds ; Small delay to start moving
	while (timer > 0)
	endw
	timer = TimeOut MilliSeconds ; Now start checking the conditions
endif

if (AxisHomingStatus=StatusHoming)
and (AxisHomingState<State5_HomedOrNot)
and (AxisHomingState>State2_Stabilising)
	if (InPositionBit=0) ; At least one motor should not be In Position
	and (FollowingEBit=0) ; No following errors should be set for any motor
	and (OnLimitBit=0) ; Should not stop on position limit for selected motors
	and (timer > 0) ; Check for timeout
		;still homing... 
		AxisHomingState=State4_PostHmMove
	else
		; Check why we left the while loop
		if (FollowingEBit=1) ; If a motor hit a following error
			AxisHomingStatus = StatusFFErr
		endif
		if (OnLimitBit=1) ; If a motor hit a limit
			AxisHomingStatus = StatusLimit
		endif
		if (timer<0 or timer=0) ; If we timed out
			AxisHomingStatus = StatusTimeout
		endif
		
		if (AxisHomingStatus = StatusHoming)
        and (HomeCompleteBit=1)
			AxisHomingState = State5_HomedOrNot
            ;should have found its new capture position
            AxisPosDiff = HomeCaptPos - Dummy
        else
            AxisHomingStatus=StatusIncomplete
		endif
	endif
endif

;single entry to this stage
if (AxisHomingStatus=StatusHoming)
and (AxisHomingState=State5_HomedOrNot)
	if(HomeCompleteBit=0) 
		AxisHomingStatus=StatusIncomplete
		;PLC2Status=-1 ; homing failed
		;RequestAxis=PLC2Status; Backward compatibility
	else
		;take note of the home adjustment in counts 
		;plus diff means home is shifted towards positive
		ADDRESS#axis
		cmd "j/"
        timer = 5000 MilliSeconds ; wait until the stage is still!
		while (DesiredVel*InPositionBit=0)
		and (AxisHomingStatus=StatusHoming)
        and (timer > 0)
			AxisHomingState=State2_Stabilising
		endwhile
		;AxisPosDiff = HomeCaptPos - Dummy
		;motor is now homed and at home position.
	
	    AxisPhaseDiff=0
		if (HomePhasePos < 0) ;no valid fine phase
			AxisHomingStatus=StatusDone
		else
			AxisHomingState=State6_Phasing
			timer = 300 MilliSeconds ; wait until the stage is still!
			while (timer > 0)
			endw
			AxisPhaseDiff=(PhasePos-HomePhasePos)/PhaseSize*360	;degrees
			if (abs(AxisPhaseDiff)<360/6)
                PhasePos=HomePhasePos
                AxisHomingStatus=StatusDone
			else
				if (AxisPhaseDiff>(360-360/6))
					AxisPhaseDiff=AxisPhaseDiff - 360;
					PhasePos=HomePhasePos
					AxisHomingStatus=StatusDone
				else 
					if (AxisPhaseDiff<-(360-360/6))
						AxisPhaseDiff=AxisPhaseDiff + 360;
						PhasePos=HomePhasePos
						AxisHomingStatus=StatusDone
					else ;if phase is NOT within 60 degrees of the preset value, then something is wrong
						AxisHomingStatus=StatusInvalid
					endif
			    endif
			endif
		endif
		;Correct position compare references to NEW HomeCaptPos
        if (eaxis_number = axis)
        and (AxisHomingStatus=StatusDone)
			AxisHomingState=State8_PCmpInit
            ;ADDRESS#caxis_number
            cmd "#10$*"
            ; hardcoded: set increments
            pCmpAutoIncr = CmpAutoIncr
            ; by default, cmpA < cmpB
            pCmpA = HomeCaptPos - 1*pCmpAutoIncr/100/2 + pCmpOffset + homeOffRaw
            pCmpB = pCmpA + 2*1*pCmpAutoIncr/100/2  ;   HomeCaptPos + 1*pCmpAutoIncr/100/2 + pCmpOffset + homeOffRaw
            ; by default, pulse is Low when cmpA < pos < cmpB
            if (pCmpA < HomeCaptPos)
                pCmpInitVal = 0
            else
                pCmpInitVal = 1
            endif
                pCmpInitialise
            lastTriggerStatus=0	
            ADDRESS#axis
        endif
	endif
endif

;------------ EXEC ----------

if (AxisHomingStatus=StatusDone)
	AxisHomingState=State7_Finished
endif

if (AxisHomingStatus!=StatusHoming)
	axis=0
	PLC2Status = 0
	RequestAxis=PLC2Status; Backward compatibility
	disable PLC2
endif

CLOSE
