CLOSE

;###########################################################
; PLC7_hold_strategy.p.pmc
; 
; Branched off PLC_power_down_when_idle.pmc
; Original Author: Pete Leicester
; Modified by ELS
;
; Modified by Nader.Afshar@synchrotron.org.au 22/May/14 to 5/Mar/15: 
;	+ Brake engage lead time added 
;	undone - Ixx71 would be set to 0 when killed 
;	+ possible to decrease current and even set it to 0 through demand variable p732_xx 
;	+ changes made to make the code compileable
;	+ compiled PLCC
;	+ added signature pVars P799 P798
;	+ added brake engage time lead	
;
;171127 modified by Nader.Afshar@synchrotron.org.au 27/Nov/2017
; 	+ brake and kill strategy for CS motors is changed. 
;	Motors belonging to an Acrive CS, will NOT be killed and nor braked, unless the CS is aborted.
; 	No change in strategy for non-CS motors.
;	+ timeout_period, brake_engagetime, full_current, hold_percentage and brake axis settings
;	are nomore updated by downloading this PLC script file
;----------------------------------------------------------------------------------------
; PLC to kill or reduce power on a motor after a defined period of inactivity.
; It can also be used to energise a brake if one exists.
; *** THIS PLC IS INTENDED FOR USE ON A GEOBRICK **** 
;
; Note1: Geobrick controllers when killed effectively short the motor cables together providing an
; brake due to back EMF when the motor is rotated. Most axis can be safely killed without losing 
; position, this is certainly the case for most lead screw drives (ball screws may require a 
; holding current).
;
; Note2: When using this PLC make sure the standard kill PLC (usually PLC7, sometimes PLC3) is removed from the geobrick.
;
; Variables
; P999
;   The number of axis on the controller 1..16 (8 for a standard geobrick)
;   This defines the highest numbered axis that may be powered down.  
; P701..P716 
;   Define timeout period in milliseconds after which the axis will be powered 
;   down provided it has been idle for the whole period (note clock resolution below).
;   Set to zero to leave the amp powered continously. 
;   Set to one for (almost) immediate power down on motor stop.
;   Set to number of milliseconds for delayed power down after motor stops.
;   Typically this should be set to a few seconds.
; P733..P748 
;   Drive current for each axis in mA
;   Set to zero if controller is not a geobrick (i.e. does not support Ixx77 amp current).
; P749..P764
;   For axis requiring a reduced holding current this contains percentage of full drive current
;   If axis is to be killed, set to zero
; P765..P780
;   If axis has a brake, the number of the M-var used to energise/de-energise it.  If none, set to 0.
; P716..P732
;   Define lead time needed for complete engagement of brake, before power down. Unit is ms. 
;	Shall be less than timeout, or will be corrected to timeout-1ms which means the brake will set immediately.
;###########################################################


P799 = 41782.49792	;NA_140522 DateTime float value to be replaced with a better signature consisted of code checksum?
P798 = 10			;reserved for author signature maybe?
P797 = 0			;NA_140409 dummy used to resolve nesting level issues for compiling 

; number of axes
#define naxis                 P999

#define signature			  P799

; used for storing current axis number
#define axis_number           P700

; defines timeout period in milliseconds (note clock resolution below)
; use axis_number to calculate the P variable to look in to get timeout period.
#define timeout_period        P(axis_number + 700) ; msec

; defines timeout period in milliseconds (note clock resolution below)
; use axis_number to calculate the P variable to look in to get timeout period.
#define brake_engagetime     P(axis_number + 716)  ; msec

; use axis_number to calculate the P variables to look in to get drive current & power down percentage.
; defines full drive current in milliamps
#define full_current         P(axis_number + 732) ; ~mA


; defines percentage holding current
#define hold_percentage      P(axis_number + 748) ; %

; brake output
#define brake                 P(axis_number + 764)


#define time_counter          P(axis_number + 780)


; zero velocity bit Mxx33
#define zero_velocity_bit     M(axis_number*100 + 33)

; amplifier enabled bit Mxx39 (0 when the motor is killed)
#define amplifier_enabled     M(axis_number*100 + 39)

; m variable saying if the motor is in a CS
#define in_CS       M(axis_number*100 + 86)

; in position bit Mxx40
#define in_position_bit       M(axis_number*100 + 40)

; amplifier_current Ixx77
#define amplifier_current     I(axis_number*100 + 77)

; time counters on P781-P796, one per axis


;NA_140409
;#define brake_output          M(brake)	
;Error when compiling M(brake): seems that nesting beyond 2nd level is illegal 
;fix: avoid the syntax using a dummy var which SHALL BE SET before brake_otput is used

#define dummy			  P797

#define brake_output          M(dummy) ;;if(dummy>31)
	
; timer
#define timer	i5412
#define millisec_conversion   8388608/i10

;NA_140408 the preceeding "&" causes compile syntax error 
;#define kill_axis             &COMMAND"K"   ;; this syntax can't be compiled
#define kill_axis             COMMAND "#K"    ;;;; to be checked

#define hold_current          full_current/100*hold_percentage

; define clock resolution in milliseconds
#define clock_tick              50

OPEN PLC 7
CLEAR

if (timer < 0)
  ; Run this code once every clock tick
  timer = clock_tick * millisec_conversion
  	
  ; Check for axis stationary with amp on
  ; Loop through all axis
  axis_number = 1
  WHILE(axis_number !> naxis)
    if (timeout_period>0)
      if (in_position_bit = 1 And amplifier_enabled = 1)
        ; motor is stationary with amp on
        time_counter = time_counter + clock_tick
        ; motor was stationary and enabled for whole timeout period so kill the motor or reduce amp power
        ; first energise the brake if one exists
        if (brake_engagetime !< timeout_period) ;; Consistency check
          brake_engagetime = timeout_period - 1
        endif
        ;brake with time lead, if motor is not locked in a CS
        if (in_CS=0) and (brake!=0) and (time_counter !< timeout_period - brake_engagetime)
        ;NA_140409 to avoid illegal syntax compile error
          dummy = brake 
          brake_output=0
        endif   
        if (time_counter !< timeout_period)
          ;;NA_140204 Suggestion: Also, make sure that the brake is effective: it may take some milliseconds
          if (in_CS=0) and (hold_current=0) 
            ADDRESS#axis_number
            kill_axis
            ;;amplifier_current=0  ;; NA_140110 to make it consistent: Ixx71 reflects the actual current applied
          else
            ; reduce the drive current - first sanity check that holding current is smaller
            ; NB this will be written repeatedly every timeout period
            ;NA_140204 don't like the check because it makes it impossible to choose a higher holding current
            if (hold_current < full_current)  
              amplifier_current=hold_current
            endif
          endif
          time_counter=0
        endif
        else
          ; motor not stationary or amp is off so reset the time counter AND brake if needed
          time_counter=0
          ;; if motor is killed, then brake immediately (within clock_tick of e.g. 50msec)
          if (amplifier_enabled = 0) and (brake!=0)
            dummy = brake
            brake_output=0	
          endif
        endif
      endif
      axis_number=axis_number+1
  ENDWHILE
endif

; Check for axis moving and increase drive current if necessary
; Loop through all axis
axis_number = 1
WHILE(axis_number !> naxis)
  if (full_current!=0) and (amplifier_enabled = 1)
    if (in_position_bit=0 Or in_CS>0)
      if (brake!=0)
        ;NA_140409 to avoid illegal syntax compile error
        dummy = brake 
        brake_output=1
      endif
      
      if (in_position_bit=0)
        amplifier_current=full_current
      endif

    endif
    ;;;;;;;;;;;;;;;;;; NA_140110 Should add this here to make it consistent <elseif><amplifier_current=0>	
  endif	
  axis_number=axis_number+1
ENDWHILE

CLOSE

DISABLE PLCC 7
ENABLE PLC 7
